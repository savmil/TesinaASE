#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Soluzione
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Descrivere la soluzione relizzata per mezzo di schematici e riportare il
 codice dei soli componenti significativi.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Schematici
\end_layout

\begin_layout Subsubsection
Display a 7 segmenti
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:display"

\end_inset


\end_layout

\begin_layout Standard
L'approccio di design adottato è rappresentato dallo schematico dell'architettur
a in figura 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{fig:display}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.7]{esercizio04/images/Display.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Architettura del display a sette segmenti}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{fig:display}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gli input sono rappresentati da: un segnale di clock, uno di reset in logica
 0 attiva, le abilitazioni per le quattro cifre del display, i valori che
 le stesse cifre devono assumere e l'eventuale posizione dei punti da accendere.
 Gli output sono costituiti dai segnali degli anodi comuni ai sette segmenti,
 uno per ciascuna cifra, e dai segnali dei catodi, sette dei quali in riferiment
o ai segmenti della cifra in questione, l'ultimo relativo al punto ad essa
 associato.
\begin_inset Newline newline
\end_inset

Il segnale di clock è filtrato da un clock filter, che restituisce un segnale
 di hit a frequenza minore.
 Il clock permette, inoltre, il conteggio al contatore modulo 4, abilitato
 dal segnale di hit del clock filter.
 Il reset, se negato, consente il ripristino del clock filter e del contatore.
 L'uscita del contatore consente di selezionare una cifra del display ad
 ogni conteggio.
 Infatti, avendo le quattro cifre i catodi dei segmenti in comune, per mostrare
 un valore differente su ciascuna di esse è necessario un refresh del valore
 con una frequenza sufficientemente elevata.
\begin_inset Newline newline
\end_inset

I segnali di abilitazione permettono di decidere quali cifre del display
 utilizzare.
 Essi, in ingresso ad un multiplexer 4x1, sono selezionati dal contatore
 per considerare in ogni istante l'abilitazione legata alla cifra corrente.
 L'abilitazione così individuata identifica l'anodo relativo attraverso
 un demultiplexer 1x4, sempre tramite la selezione del contatore.
 Ad ogni conteggio, la cifra selezionata avrà anodo basso o alto, a seconda
 dei valori di abilitazione passati in ingresso.
\begin_inset Newline newline
\end_inset

I 16 bit di ingresso dei valori rappresentano i quattro nibble relativi
 alle quattro cifre del display.
 Una struttura di multiplexing seleziona, in riferimento ai valori di conteggio,
 il nibble relativo alla cifra corrente.
 I 4 bit del nibble entrano in un transcodificatore per la corretta accensione
 dei sette segmenti della cifra.
\begin_inset Newline newline
\end_inset

L'ottavo catodo della cifra è costituito dal punto ad essa associato.
 I quattro segnali di ingresso dei punti, infatti, decretano se il punto,
 associato alla cifra selezionata, debba essere acceso, o meno.
 Un multiplexer 4x1 seleziona, grazie al conteggio, il valore corretto da
 assegnare al punto della cifra corrente.
\begin_inset Newline newline
\end_inset

L'implementazione dell'architettura è stata realizzata mediante la rappresentazi
one RT Level di figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:impl"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.8]{esercizio04/images/Implementazione.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Display RTL Schematic}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{fig:impl}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Struttura di multiplexing 16x4
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:mux16x4"

\end_inset


\end_layout

\begin_layout Standard
Esplodiamo l'architettura che consente la selezione del nibble relativo
 alla cifra corrente del conteggio.
 Essa è realizzata mediante 4 multiplexer 4x1, ognuno dei quali riceve in
 ingresso un bit di pari peso dei nibble associati alle diverse cifre.
 L'ingresso di selezione è costituito dall'uscita del contatore.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.9]{esercizio04/images/Mux16x4.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Architettura di multiplexing 16x4}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{fig:mux16x4}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Codice
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:progetti/display_sette_segmenti/display_sette_segmenti.xise}{Display
 sette segmenti ISE}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Nell'eventialità in cui alcuni componenti sia stati utilizzati in altri
 esercizi inserire solo un riferimento (es.
 Multiplexer Generico - traccia n° 1)
\end_layout

\begin_layout Plain Layout
Segue un esempio di inclusione di codice
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Clock Filter
\end_layout

\begin_layout Standard
Il clock filter riceve in ingresso un segnale di reset in logica 0 attiva
 per ritornare ad uno stato neutro in modo asincrono all'elaborazione del
 conteggio.
 Esso funge da divisore di frequenza, restituendo il segnale hit con una
 frequenza sottomultipla di quella del clock in ingresso.
 Il rapporto tra le due frequenze rappresenta il numero di conteggi da effettuar
e dopo il quale il filtro deve alzare hit (nemero di colpi di clock in un
 periodo di hit).
 Non si è potuto sfruttare un contatore modulo 
\begin_inset Formula $2^{N}$
\end_inset

 perché non è detto che il conteggio sia potenza di 2.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting [language=VHDL,caption={Definizione del componente Clock
 Filter}] {esercizio04/codice/clock_filter.vhd}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Anode Manager
\end_layout

\begin_layout Standard
Il gestore degli anodi utilizza una rete mux-demux per abilitare ad ogni
 conteggio l'anodo corretto.
 L'uscita del contatore rappresenta l'ingresso di selezione sia per il multiplex
er, che per il demultiplexer.
 Gli ingressi di abilitazione entrano in un mux 4x1.
 L'uscita del multiplexer è posta in ingresso al demultiplexer.
 Lo stesso segnale di selezione garantisce che l'abilitazione sarà portata
 fino all'anodo a cui essa fa riferimento.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting [language=VHDL,caption={Definizione del componente Anode
 Manager}] {esercizio04/codice/anode_manager.vhd}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Cathode Manager
\end_layout

\begin_layout Standard
Il gestore dei catodi riceve in ingresso il conteggio, i valori che i catodi
 dei sette segmenti devono assumere e quelli del catodo dei punti.
 L'uscita è costituita dagli 8 segnali dei catodi.
 Il componente sfrutta la struttura di multiplexing descritta in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:mux16x4"

\end_inset

.
 Per fare ciò riordina i valori di ingresso nel modo richiesto dalla batteria
 di mux 4x1.
 Il nibble così ottenuto entra nel transcodificatore, realizzato col componente
 cathode encoder, dal quale si ottengono i segnali dei catodi dei sette
 segmenti.
 Il segnale dell'ultimo catodo è ricavato dal multiplexing dei valori dei
 punti in ingresso: un mux 4x1 determina quale valore porre in uscita sul
 catodo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting [language=VHDL,caption={Definizione del componente Cathode
 Manager}] {esercizio04/codice/cathode_manager.vhd}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Cathode_encoder
\end_layout

\begin_layout Standard
Questo componente effettua la funzione di transcodifica di un nibble nelle
 funzioni booleane dei sette segmenti.
 Esso, dunque, riceve in input un nibble e restituisce il valore assunto
 dai catodi dei sette segmenti.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[language=VHDL, caption={Interfaccia del componente Cathode
 Encoder},firstline=1,lastline=8]{esercizio04/codice/cathode_encoder.vhd}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A scopo didattico, la sua implementazione è stata effettuata seguendo differenti
 approcci.
\end_layout

\begin_layout Paragraph
Behavioral
\end_layout

\begin_layout Standard
Questo approccio comportamentale prevede, appunto, la specifica del comportament
o dell'uscita in concomitanza a ciascuna combinazione degli ingressi mediante
 costrutto 
\emph on
case-when
\emph default
.
 Sono state definite delle costanti per ogni caso al fine di migliorare
 la leggibilità.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[language=VHDL, caption={Architettura Behavioral del componente
 Cathode Encoder},firstline=10,lastline=70]{esercizio04/codice/cathode_encoder.vh
d}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Structural
\end_layout

\begin_layout Standard
Questo approccio realizza il transcodificatore con 7 mux 8x1, mostrando
 l'utilizzo del multiplexer come rete universale.
 I 3 bit più significativi del nibble vanno a costituire l'ingresso di selezione
 dei multiplexer, mentre il bit meno significativo permette la codifica
 degli ingressi.
 In figura 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{fig:muxA}
\end_layout

\end_inset

 viene rappresentato il caso per la funzione booleana del segmento A.
 Si assumono gli ingressi denominati come 
\emph on
x,y,z,v
\emph default
, a partire dal bit più significativo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.6]{esercizio04/images/MuxA8x1.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Multiplexer 8x1 che realizza la funzione booleana del segmento A}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{fig:muxA}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dopo la costruzione dei vettori degli ingressi per ogni multiplexer, si
 è definito un vettore di vettori per consentire una generazione della struttura
 mediante il costrutto 
\emph on
for-generate
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[language=VHDL, caption={Architettura Structural del componente
 Cathode Encoder},firstline=73,lastline=110]{esercizio04/codice/cathode_encoder.v
hd}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Dataflow
\end_layout

\begin_layout Standard
Denominati gli ingressi come nel paragrafo precendete, si è provveduto a
 definire un file blif per la funzione multi-uscita dei sette segmenti.
 In tal modo è stata possibile una minimizzazione con SIS attraverso l'uso
 del 
\emph on
rugged-script
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.9]{esercizio04/images/7SegRuggedScriptmod.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Funzione multi-uscita dei sette segmenti minimizzata col rugged-script}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{fig:7segrs}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ogni uscita è calcolata in base alla forma minimizzata della funzione corrispond
ente.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[language=VHDL, caption={Architettura Dataflow del componente
 Cathode Encoder},firstline=112,lastline=149]{esercizio04/codice/cathode_encoder.
vhd}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Display
\end_layout

\begin_layout Standard
Il display non fa altro che realizzare la struttura descritta in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:display"

\end_inset

.
 Sono infatti istanziati e collegati nel modo descritto i componenti cui
 abbiamo fatto riferimento.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting [language=VHDL,caption={Definizione del componente Display}]
 {esercizio04/codice/display.vhd}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
