#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Soluzione
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Descrivere la soluzione relizzata per mezzo di schematici e riportare il
 codice dei soli componenti significativi.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Schematici
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[scale=0.65]{esercizio15/images/UART.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{UART}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si è realizzata una versione di UART secondo lo schema PO/PC, i componenti
 principali solo le due macchine a stati finiti: il trasmitter che consiste
 di cinque stati: idle, rimane in attesa fino a che non si decide di avviare
 una trasmissione, send_start invia il segnale di start; wait_for_next attende
 fino a che il contatore counter_t non genera un segnale di counter hit,
 per far sì prima che venga inviata la successiva informazione, quella attuale
 venga sorretta per sedici colpi di clock; send che fa shiftare la scan
 chain con il dato ingresso per invare il successivo bit, send_stop che
 invia il bit di stop, si abilita questo stato quando il numero di bit trasmetti
 è pari ad otto (il conteggio è fissato da un contatore).
 Il ricevitore invece è composto solo da quattro stati: idle che permane
 fino a quando la linea dei dati in ingresso è alta; sfasamento che fa in
 modo di posizionare l' evento di lettura del dato a metà del tempo di attesa,
 così da essere sicuri di leggere correttamente il bit; wait_for_next dove
 si attende per leggere il successivo bit; receive dopo si legge il bit
 in ingresso, anche il ricevitore ha un contatore che conta il numero di
 bit letti così dopo aver letto l' ottavo si ritorna in idle, che conta
 il numero di cicli di clock per lo sfasamento ed il numero di colpi di
 clock da attendere prima di leggere il successivo dato.
 I dati in input ed in output sono sorretti da due scan chain come quelle
 utilizzate in Booth 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{Booth}
\end_layout

\end_inset

, quella dell' input è più grande di bit perchè vi è un primo bit alto per
 indicare che non vi è trasmissione di dati fino a che non vi è un invio
 di dati, il secondo è il bit di start ed il terzo messo in coda ai dati
 è quello di stop.
\end_layout

\begin_layout Standard
Premettendo che la soluzione di Digilent effettua vari controlli sulla trasmissi
one qui non effettuati, la riteniamo di non facile comprensione, scrivere
 in un unico file VHDL sia il ricevitore, trasmettitore, i contatori e tutti
 gli altri componenti a supporto non permette di rendere chiara la lettura,
 non è lampante quali parti siano a supporto del ricevitore e quali del
 ricevitore, non permettendo così una modifica veloce nel caso in cui volessimo
 attendere ad esempio trentadue cicli di clock prima di inviare ricevere
 un altro dato o estrapolare uno solo dei due componenti e riutilizzarlo
 (pensiamo al caso in cui dobbiamo solo inviare i dati e non riceverli),
 invece nella nostra soluzione possiamo estrapolare una delle due macchine
 a stati finiti all' occorrenza e nell' unico file in cui sono riacchiusi
 i componenti a corredo capire quali ci occorrono ed ricopiarli, oppure
 in base ai segnali in ingresso alle due macchine sequenziali capire quali
 segnali ci possano occorrere, altro punto a sfavore è la realizzazione
 di diversi process per fare andare la macchina ad una frequenza voluta
 per trasmettere ricevere ad un determinato baud rate, soluzione migliore
 consisterebbe di utilizzare un DCM e cambiare la frequenza in base alla
 necessità.
\end_layout

\begin_layout Subsection
Codice
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:progetti/UART/UART.xise}{UART ISE}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Nell'eventialità in cui alcuni componenti sia stati utilizzati in altri
 esercizi inserire solo un riferimento (es.
 Multiplexer Generico - traccia n° 1)
\end_layout

\begin_layout Plain Layout
Segue un esempio di inclusione di codice
\end_layout

\end_inset


\end_layout

\end_body
\end_document
