#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Soluzione
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Descrivere la soluzione relizzata per mezzo di schematici e riportare il
 codice dei soli componenti significativi.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Schematici
\end_layout

\begin_layout Standard
Il seguente circuito implementa l' algortimo RSA per la firma di un messaggio,
 applica una funzione di hash sul messaggio e verifica che il messaggio
 ricevuto sia coretto.
 Il tutto avviene nel seguente modo: dopo aver scelto i valori caratteristici
 per inviare il dato (p pari a 3, q 11, e 7 e d 3) ed il messaggio da inviare,
 viene prima effettuato l' hashing del messaggio, utilizzando il metodo
 della moltiplicazione, dopodichè sul messaggio originale viene applicata
 la chiave privata, il trasmettitore invia i due dati appena calcolati.
 Il ricevitore applica la chiave pubblica sul messaggio firmato, ne effettua
 l' hashing e verifica se la sua versione del messaggio a cui è stato applicato
 l' hashing è identico a quello che è stato ricevuto.
\end_layout

\begin_layout Standard
Di seguito vengono descritte le varie componenti che vengono utilizzate
 per effettuare l' hashing e firmare il messaggio.
\end_layout

\begin_layout Subsubsection
Funzione hash
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.6]{esercizio17/images/hash.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{hasher}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{fig:Mod_exp}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset

Il circuito utilizza una macchina a stati finiti descritta da cinque stati:
 idle, stato di riposo dell' automa; init in cui si attende che il moltiplicator
e termini il suo compito; shifting_r in cui il valore della moltiplicazione
 viene shiftato a destra; shifting_l il valore viene shiftato a sinistra;
 ended per comunicare la fine dell' operazione di hash.
 Il circito è così descritto perché tale forma di hashing prevedere di moltiplic
are il dato per un valore A il quale è un numero compreso tra 0 ed 1, di
 cui il denominatore è un multiplo di due, per tale ragione di è scelto
 di moltiplicare per un valore W ed infine di shiftare a destra un numero
 di volte pari al valore dell' esponente, tale numero è la parte decimale
 del valore del dato per W (perché quando shiftiamo inseriamo degli zero
 fittizzi), dopodichè si effettua uno shifting a sinistra di un numero pari
 di volte affinché la nostra parte deciamale rientri nella parte del registro
 da inviare, nel nostro caso avendo un dato da otto bit e dovendolo trasformare
 in un messaggio da trentadue non compaiono questi problemi.
\end_layout

\begin_layout Subsubsection
Esponenziatore
\end_layout

\begin_layout Standard
Per effettuare l' elevazione a potenza con il modulo, ci siamo riferiti
 a questo algoritmo :
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.8]{esercizio17/images/mod_exp.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Algoritmo per modular exponentiational di un messaggio}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{fig:Mod_exp}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L ' algoritmo cicla sul numero di bit dell ' esponente, moltiplica il valore
 d prima per se stesso e ne fa il modulo, questo stesso valore di d per
 la base quando il valore dell' esponente in forma binaria assume valore
 uno e ne effettua il modulo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[H]
\end_layout

\begin_layout Plain Layout

	
\backslash
centering
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[scale=0.6]{esercizio17/images/exp.png}
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Hardware Exponentiational}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbiamo deciso di utilizzare quest' ultimo perché ci permette di riutilizzare
 componenti già sviluppati negli esercizi precedenti, difatti osservando
 lo schematico, vi è presente un moltiplicatore di Booth e il divisore restoring
 per le varie operazioni prodotto e modulo, un contatore down per indicare
 quale dei bit dell' esponente dobbiamo analizzare e dei selettori descritti
 con il costrutto with select per selezionare quali valori devono essere
 moltiplicati.
 La macchina a stati finiti non fa altro che eseguire i vari passi dell'
 algoritmo, però per problemi relativi al timing è stata realizzata alla
 fine con un singolo process, difatti una prima realizzazione con due process
 determinava che alcuni registri contenti i dati dell' operazione assumessero
 un valore indefinito.
 
\end_layout

\begin_layout Standard
Per problemi di spazio, si è ricorsi a componenti per la moltiplicazione
 e divisione seriali, oltre ad riutilizzarli all' interno dello stesso progetto
 difatti il moltiplicatore di Booth è stato utilizzato per: calcolare il
 prodotto di pq, per la funzione di hashing ed l' esponenziazione.
\end_layout

\begin_layout Subsection
Codice
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:progetti/RSA/RSA.xise}{RSA ISE}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Nell'eventialità in cui alcuni componenti sia stati utilizzati in altri
 esercizi inserire solo un riferimento (es.
 Multiplexer Generico - traccia n° 1)
\end_layout

\begin_layout Plain Layout
Segue un esempio di inclusione di codice
\end_layout

\end_inset


\end_layout

\end_body
\end_document
